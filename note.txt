1.对于变量和函数，当标识符以大写字母开头时，则可以被外部包引用
  当标识符为小写字母开头时，不可以被外部包引用。

2.函数的一般写法:
  func functionName(parameter_list) (return_value_list) {
   …
  }

3.Go程序的一般结构:
  1)在完成包的import后，开始对常量、变量和类型的定义或声明
  2)如果存在init函数，则对该函数进行定义
  3)如果当前包是main包，则定义main函数。
  4)然后定义其余的函数，首先时类型方法,接着按照main函数中先后调用的顺序来定义相关函数，
    如果有很多函数，则可以按照字母顺序来排序

4.Go程序的执行顺序:
  1)按顺序导入所有被main包所引用的其他包，然后在每个包中执行如下流程:
  2)如果该包又导入了其他的包,则从第一步开始执行递归，但是每个包只会被导入一次。
  3)然后以相反的顺序在每个包中初始化常量和变量，如果该包又init函数的话，则调用该函数。
  4)在完成这一切后，main也执行同样的过程，最后调用main函数开始执行程序

5.iota没遇到一个const就重新归零，每定义一个常量，则iota+1。
  如果不定义值,下一行的常量可以自动延续上一行的表达式,第一行必须有显示的表达式的定义(iota也需要有)

6.go语言不支持函数重载!!

7.go语言目前不支持泛型!!

8.关于go的defer:
    1)多个defer的执行顺序为“后进先出”；
    2)所有函数在执行RET返回指令之前，都会先检查是否存在defer语句，若存在则先逆序调用defer语句进行收尾工作再退出返回；
    3)匿名返回值是在return执行时被声明，有名返回值则是在函数声明的同时被声明，因此在defer语句中只能访问有名返回值，
      而不能直接访问匿名返回值；
    4)return其实应该包含前后两个步骤：第一步是给返回值赋值（若为有名返回值则直接赋值，若为匿名返回值则先声明再赋值）；
      第二步是调用RET返回指令并传入返回值，而RET则会检查defer是否存在，若存在就先逆序插播defer语句，最后RET携带返回值退出函数；
    因此，defer、return、返回值三者的执行顺序应该是：return最先给返回值赋值；
    接着defer开始执行一些收尾工作；最后RET指令携带返回值退出函数。